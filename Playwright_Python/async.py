from playwright.async_api import async_playwright
import asyncio
import time

async def sandbox():
   async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page()
        await page.goto("/")
        time.sleep(3)
        await page.wait_for_timeout(2000)
        await page.get_by_label("Email").click()
        await page.get_by_label("Email").fill("username")
        await page.get_by_role("button", name="Next").click()
        await page.get_by_role("textbox", name="Password").click()
        await page.get_by_role("textbox", name="Password").fill("password")
        await page.get_by_role("button", name="Verify").click()
        print("Logged in Successfully")
        await page.wait_for_timeout(2000)
        await page.get_by_label("NORTH AMERICA-ADMIN").check()
        await page.get_by_role("button", name="Ok").click()
        print("Admin Option Selected")
        await page.get_by_role("button", name="Real-Time Price Lookup").click()
        await page.wait_for_timeout(2000)
        await page.get_by_label("Site Cluster Set").check()
        await page.get_by_label("Product Filter").check()
        await page.locator("#siteClusterSet").click()
        print("Options Selected!")
        # await page.locator(("//*[text()='Reset']")).click()
        # await page.locator("#siteClusterSet-wrapper svg").click()
        await page.get_by_role("option", name="Nike Factory Stores").click()
        await page.get_by_test_id("autocomplete").get_by_label("Product Filter").click()
        await page.wait_for_timeout(2000)
        await page.get_by_test_id("autocomplete").get_by_label("Product Filter").fill("per")
        await page.get_by_role("option", name="Performance variants").click()
        print("Dropdown Items Selected")
        await page.get_by_role("button", name="Execute").click()
        await page.wait_for_timeout(25000)
        await page.mouse.wheel(0,15000)
        table =  page.locator('.ag-root-wrapper-body')
        await table.click()
        await page.wait_for_timeout(2000)
        #box = table.bounding_box()
        await page.mouse.wheel(2000, 0)
        #await table.evaluate("table=>table.scrollTop = table.scrollHeight")
        await page.wait_for_timeout(2000)
        await page.mouse.wheel(0, 2000)
        csp_value = await page.locator("[role='gridcell'][col-id='csp']").nth(0).text_content()
        print(csp_value)
        await page.wait_for_timeout(2000)
        await page.mouse.wheel(-15000,0)
        csp_siteid = await page.locator("[role='gridcell'][col-id='siteId']").nth(0).text_content()
        print(csp_siteid)
        pagination = page.locator(".ag-picker-field-icon")
        await pagination.click()
        await page.wait_for_timeout(2000)
        await page.get_by_text("10", exact=True).click()
        await page.wait_for_timeout(2000)
        # # await page.pause()
        # dashboard_button = page.locator("#dashboard")
        # await dashboard_button.click()

        # await page.evaluate('window.scrollBy(1000, 0)')
        # for _ in range(5):
        #     await page.evaluate('window.scrollBy(500, 0)')
        # await page.wait_for_timeout(20000)
        await page.screenshot(path="demo.png")
        print (await page.title())
        print ("Test Completed! No Errors!!")
        await  browser.close()
asyncio.run(sandbox())